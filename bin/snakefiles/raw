rule raw_sample_sff_make_link_sff:
    """
    Create links from original file to other one in results/raw/{sample_name}.sff
    """
    input:
        sff = lambda wildcards: config["samples_sff"][wildcards.sample]["sff"]
    output:
        sff = raw_dir + "{sample}.from_sff.sff"
    log:
        raw_log + "{sample}_sff_make_link.log"
    benchmark:
        raw_log + "{sample}_sff_make_link.json"
    shell:
        "ln --symbolic "
            "$(readlink --canonicalize {input.sff} "
            "{output.sff}) "
        "2> {log}"



rule raw_sample_fastq_make_link:
    """
    Create links from original file to other one in results
    """
    input:
        fastq = lambda wildcards: config["samples_fastq"][wildcards.sample]["fastq"]
    output:
        fastq = raw_dir + "{sample}.from_fastq.raw.fq.gz"
    log:
        raw_log + "{sample}_fastq_make_link.log"
    benchmark:
        raw_log + "{sample}_fastq_make_link.json"
    shell:
        "ln --symbolic "
            "$(readlink --canonicalize {input.fastq} "
            "{output.fastq}) "
        "2> {log}"



rule raw_sample_sff_to_fastq:
    """
    Convert original sff to fastq.gz
    """
    input:
        sff= raw_dir + "{sample}.from_sff.sff"
    output:
        fq_gz= temp(raw_dir + "{sample}.from_sff.raw.fq.gz")
    threads:
        1
    log:
        raw_log + "{sample}_sff_to_fastq.log"
    benchmark:
        raw_log + "{sample}_sff_to_fastq.json"
    shell:
        "(python3 bin/fasta_qual_to_fastq.py "
            "<(./src/454/bin/sffinfo -s {input.sff}) "
            "<(./src/454/bin/sffinfo -q {input.sff}) | "
        "pigz "
            "--best "
        "> {output.fq_gz} ) "
        "2> {log}"



rule raw_adaptors_make_link:
    """
    Create link to from the original adaptor file to data/adaptors/adaptors.fa
    """
    input:
        fa = config["adaptors"]
    output:
        fa = raw_dir + "adaptors.fa"
    threads:
        1
    log:
        raw_log + "adaptors_make_link.log"
    benchmark:
        raw_log + "adaptors_make_link.json"
    shell:
        "ln --symbolic "
            "$(readlink --canonicalize {input.fa}) "
            "{output.fa} "
        "2> {log}"
