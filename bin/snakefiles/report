rule report_sample_from_sff_raw_fastqc:
    """
    Run fastqc over original reads
    """
    input:
        fastq = raw_dir + "{sample}.from_sff.raw.fq.gz"
    output:
        zip   = report_dir + "{sample}.from_sff.raw_fastqc.zip",
        html  = report_dir + "{sample}.from_sff.raw_fastqc.html"
    threads:
        1
    params:
        outdir = report_dir
    log:
        report_log + "{sample}.from_sff.raw_fastqc.log"
    benchmark:
        report_log + "{sample}.from_sff.raw_fastqc.json"
    shell:
        "fastqc "
            "--nogroup "
            "--outdir {params.outdir} "
            "{input.fastq} "
        "> {log} 2>&1"



rule report_sample_from_sff_pyrobayes_fastqc:
    """
    Run fastqc over corrected reads with pyrobayes
    """
    input:
        fastq = qc_dir + "{sample}.from_sff.pyrobayes.fq.gz"
    output:
        zip   = report_dir + "{sample}.from_sff.pyrobayes_fastqc.zip",
        html  = report_dir + "{sample}.from_sff.pyrobayes_fastqc.html"
    threads:
        1
    params:
        outdir = report_dir
    log:
        report_log + "{sample}.from_sff.pyrobayes_fastqc.log"
    benchmark:
        report_log + "{sample}.from_sff.pyrobayes_fastqc.json"
    shell:
        "fastqc "
            "--nogroup "
            "--outdir {params.outdir} "
            "{input.fastq} "
        "> {log} 2>&1"



rule report_sample_from_sff_snowhite_fastqc:
    """
    Run fastqc over filtered reads with snowhite
    """
    input:
        fastq = qc_dir + "{sample}.from_sff.snowhite.fq.gz"
    output:
        zip   = report_dir + "{sample}.from_sff.snowhite_fastqc.zip",
        html  = report_dir + "{sample}.from_sff.snowhite_fastqc.html"
    threads:
        1
    params:
        outdir = report_dir
    log:
        report_log + "{sample}.from_sff.snowhite_fastqc.log"
    benchmark:
        report_log + "{sample}.from_sff.snowhite_fastqc.json"
    shell:
        "fastqc "
            "--nogroup "
            "--outdir {params.outdir} "
            "{input.fastq} "
        "> {log} 2>&1"



rule report_fastqc_trimmomatic_from_sff_sample:
    """
    Run fastqc over filtered reads with trimmomatic
    """
    input:
        fastq = qc_dir + "{sample}.from_sff.trimmomatic.fq.gz"
    output:
        zip   = report_dir + "{sample}.from_sff.trimmomatic_fastqc.zip",
        html  = report_dir + "{sample}.from_sff.trimmomatic_fastqc.html"
    threads:
        1
    params:
        outdir = report_dir
    log:
        report_log + "{sample}.from_sff.trimmomatic_fastqc.log"
    benchmark:
        report_log + "{sample}.from_sff.trimmomatic_fastqc.json"
    shell:
        "fastqc "
            "--nogroup "
            "--outdir {params.outdir} "
            "{input.fastq} "
        "> {log} 2>&1"



rule report_sample_from_sff_multiqc:
    """
    Run multiqc over all the fastqc reports of sample
    """
    input:
        raw_zip = report_dir + "{sample}.from_sff.raw_fastqc.zip",
        pyrobayes_zip = report_dir + "{sample}.from_sff.pyrobayes_fastqc.zip",
        snowhite_zip = report_dir + "{sample}.from_sff.snowhite_fastqc.zip",
        trimmomatic_zip = report_dir + "{sample}.from_sff.trimmomatic_fastqc.zip"
    output:
        html = report_dir + "{sample}.from_sff.multiqc.html"
    threads:
        1
    params:
        fofn = report_dir + "{sample}.fastqclist.fofn",
        title = "\'MultiQC report for {sample}\'",
        template = config["software_params"]["multiqc"]["template"],
        data_format = config["software_params"]["multiqc"]["data_format"],
        additional_params = config["software_params"]["multiqc"]["additional_params"],
    log:
        report_log + "{sample}.from_sff.multiqc.log"
    benchmark:
        report_log + "{sample}.from_sff.multiqc.json"
    shell:
        "echo {input} | "
        "tr -s \" \" | "
        "tr \" \" \"\\n\" "
        "> {params.fofn} 2> {log} ; "
        "multiqc "
            "--fullnames "
            "--title {params.title} "
            "--filename {output.html} "
            "--template {params.template} "
            "--file-list {params.fofn} "
            "--data-format {params.data_format} "
            "{params.additional_params} "
        "2>> {log} 1>&2 ; "



################# FASTQ

rule report_sample_from_fastq_raw_fastqc:
    """
    Run fastqc over original reads
    """
    input:
        fastq = raw_dir + "{sample}.from_fastq.raw.fq.gz"
    output:
        zip   = report_dir + "{sample}.from_fastq.raw_fastqc.zip",
        html  = report_dir + "{sample}.from_fastq.raw_fastqc.html"
    threads:
        1
    params:
        outdir = report_dir
    log:
        report_log + "{sample}.from_fastq.raw_fastqc.log"
    benchmark:
        report_log + "{sample}.from_fastq.raw_fastqc.json"
    shell:
        "fastqc "
            "--nogroup "
            "--outdir {params.outdir} "
            "{input.fastq} "
        "> {log} 2>&1"



rule report_sample_from_fastq_snowhite_fastqc:
    """
    Run fastqc over filtered reads with snowhite
    """
    input:
        fastq = qc_dir + "{sample}.from_fastq.snowhite.fq.gz"
    output:
        zip   = report_dir + "{sample}.from_fastq.snowhite_fastqc.zip",
        html  = report_dir + "{sample}.from_fastq.snowhite_fastqc.html"
    threads:
        1
    params:
        outdir = report_dir
    log:
        report_log + "{sample}.from_fastq.snowhite_fastqc.log"
    benchmark:
        report_log + "{sample}.from_fastq.snowhite_fastqc.json"
    shell:
        "fastqc "
            "--nogroup "
            "--outdir {params.outdir} "
            "{input.fastq} "
        "> {log} 2>&1"



rule report_sample_from_fastq_trimmomatic_fastqc:
    """
    Run fastqc over filtered reads with trimmomatic
    """
    input:
        fastq = qc_dir + "{sample}.from_fastq.trimmomatic.fq.gz"
    output:
        zip   = report_dir + "{sample}.from_fastq.trimmomatic_fastqc.zip",
        html  = report_dir + "{sample}.from_fastq.trimmomatic_fastqc.html"
    threads:
        1
    params:
        outdir = report_dir
    log:
        report_log + "{sample}.from_fastq.trimmomatic_fastqc.log"
    benchmark:
        report_log + "{sample}.from_fastq.trimmomatic_fastqc.log"
    shell:
        "fastqc "
            "--nogroup "
            "--outdir {params.outdir} "
            "{input.fastq} "
        "> {log} 2>&1"



rule report_sample_from_fastq_multiqc:
    """
    Run multiqc over all the fastqc reports of sample
    """
    input:
        raw_zip = report_dir + "{sample}.from_fastq.raw_fastqc.zip",
        snowhite_zip = report_dir + "{sample}.from_fastq.snowhite_fastqc.zip",
        trimmomatic_zip = report_dir + "{sample}.from_fastq.trimmomatic_fastqc.zip"
    output:
        html = report_dir + "{sample}.from_fastq.multiqc.html"
    threads:
        1
    params:
        fofn = report_dir + "{sample}_fastqclist.fofn",
        title = "\'MultiQC report for {sample}\'",
        template = config["software_params"]["multiqc"]["template"],
        data_format = config["software_params"]["multiqc"]["data_format"],
        additional_params = config["software_params"]["multiqc"]["additional_params"],
    log:
        report_log + "{sample}.from_fastq.multiqc.log"
    benchmark:
        report_log + "{sample}.from_fastq.multiqc.json"
    shell:
        "echo {input} | "
        "tr -s \" \" | "
        "tr \" \" \"\\n\" "
        "> {params.fofn} 2> {log} ; "
        "multiqc "
            "--fullnames "
            "--title {params.title} "
            "--filename {output.html} "
            "--template {params.template} "
            "--file-list {params.fofn} "
            "--data-format {params.data_format} "
            "{params.additional_params} "
        "2>> {log} 1>&2 ; "



##########################AL



rule report_all_multiqc:
    """
    Run multiqc over all fastqc reports
    """
    input:
        expand(
            report_dir + "{sample}.from_sff.raw_fastqc.zip",
            sample = SAMPLES_SFF
        ),
        expand(
            report_dir + "{sample}.from_sff.pyrobayes_fastqc.zip",
            sample = SAMPLES_SFF
        ),
        expand(
            report_dir + "{sample}.from_sff.snowhite_fastqc.zip",
            sample = SAMPLES_SFF
        ),
        expand(
            report_dir + "{sample}.from_fastq.raw_fastqc.zip",
            sample = SAMPLES_FASTQ
        ),
        expand(
            report_dir + "{sample}.from_fastq.snowhite_fastqc.zip",
            sample = SAMPLES_FASTQ
        ),
        expand(
            report_dir + "{sample}.from_fastq.trimmomatic_fastqc.zip",
            sample = SAMPLES_FASTQ
        )
    output:
        html= report_dir + "all.multiqc.html",
    threads:
        1
    params:
        fofn = report_dir + "all_fastqc.fofn",
        title = "\'MultiQC report for all samples\'",
        template = config["software_params"]["multiqc"]["template"],
        data_format = config["software_params"]["multiqc"]["data_format"],
        additional_params = config["software_params"]["multiqc"]["additional_params"]
    log:
        report_log + "all.multiqc.log"
    benchmark:
        report_log + "all.multiqc.json"
    shell:
        "echo {input} | "
        "tr -s \" \" | "
        "tr \" \" \"\\n\" "
        "> {params.fofn} 2> {log} ; "
        "multiqc "
            "--fullnames "
            "--title {params.title} "
            "--filename {output.html} "
            "--template {params.template} "
            "--file-list {params.fofn} "
            "--data-format {params.data_format} "
            "{params.additional_params} "
        "2>> {log} 1>&2"



rule report_raw_multiqc:
    input:
        expand(
            report_dir + "{sample}.from_sff.raw_fastqc.zip",
            sample = SAMPLES_SFF
        ),
        expand(
            report_dir + "{sample}.from_fastq.raw_fastqc.zip",
            sample = SAMPLES_FASTQ
        )
    output:
        html= report_dir + "raw.multiqc.html",
    threads:
        1
    params:
        fofn = report_dir + "raw_fastqc.fofn",
        title = "\'MultiQC report for raw samples\'",
        template = config["software_params"]["multiqc"]["template"],
        data_format = config["software_params"]["multiqc"]["data_format"],
        additional_params = config["software_params"]["multiqc"]["additional_params"]
    log:
        report_log + "raw.multiqc.log"
    benchmark:
        report_log + "raw.multiqc.json"
    shell:
        "echo {input} | "
        "tr -s \" \" | "
        "tr \" \" \"\\n\" "
        "> {params.fofn} 2> {log} ; "
        "multiqc "
            "--fullnames "
            "--title {params.title} "
            "--filename {output.html} "
            "--template {params.template} "
            "--file-list {params.fofn} "
            "--data-format {params.data_format} "
            "{params.additional_params} "
        "2>> {log} 1>&2"



rule report_pyrobayes_multiqc:
    input:
        expand(
            report_dir + "{sample}.from_sff.pyrobayes_fastqc.zip",
            sample = SAMPLES_SFF
        )
    output:
        html= report_dir + "pyrobayes.multiqc.html",
    threads:
        1
    params:
        fofn = report_dir + "pyrobayes_fastqc.fofn",
        title = "\'MultiQC report for samples called with Pyrobayes\'",
        template = config["software_params"]["multiqc"]["template"],
        data_format = config["software_params"]["multiqc"]["data_format"],
        additional_params = config["software_params"]["multiqc"]["additional_params"]
    log:
        report_log + "pyrobayes.multiqc.log"
    benchmark:
        report_log + "pyrobayes.multiqc.json"
    shell:
        "echo {input} | "
        "tr -s \" \" | "
        "tr \" \" \"\\n\" "
        "> {params.fofn} 2> {log} ; "
        "multiqc "
            "--fullnames "
            "--title {params.title} "
            "--filename {output.html} "
            "--template {params.template} "
            "--file-list {params.fofn} "
            "--data-format {params.data_format} "
            "{params.additional_params} "
        "2>> {log} 1>&2"



rule report_snowhite_multiqc:
    input:
        expand(
            report_dir + "{sample}.from_sff.snowhite_fastqc.zip",
            sample = SAMPLES_SFF
        ),
        expand(
            report_dir + "{sample}.from_fastq.snowhite_fastqc.zip",
            sample = SAMPLES_FASTQ
        )
    output:
        html= report_dir + "snowhite.multiqc.html",
    threads:
        1
    params:
        fofn = report_dir + "snowhite.fastqc.fofn",
        title = "\'MultiQC report for samples corrected with Snowhite\'",
        template = config["software_params"]["multiqc"]["template"],
        data_format = config["software_params"]["multiqc"]["data_format"],
        additional_params = config["software_params"]["multiqc"]["additional_params"]
    log:
        report_log + "snowhite.multiqc.log"
    benchmark:
        report_log + "snowhite.multiqc.json"
    shell:
        "echo {input} | "
        "tr -s \" \" | "
        "tr \" \" \"\\n\" "
        "> {params.fofn} 2> {log} ; "
        "multiqc "
            "--fullnames "
            "--title {params.title} "
            "--filename {output.html} "
            "--template {params.template} "
            "--file-list {params.fofn} "
            "--data-format {params.data_format} "
            "{params.additional_params} "
        "2>> {log} 1>&2"



rule report_trimmomatic_multiqc:
    input:
        expand(
            report_dir + "{sample}.from_sff.trimmomatic_fastqc.zip",
            sample = SAMPLES_SFF
        ),
        expand(
            report_dir + "{sample}.from_fastq.trimmomatic_fastqc.zip",
            sample = SAMPLES_FASTQ
        )
    output:
        html= report_dir + "trimmomatic.multiqc.html",
    threads:
        1
    params:
        fofn = report_dir + "trimmomatic.fastqc.fofn",
        title = "\'MultiQC report for samples corrected with trimmomatic\'",
        template = config["software_params"]["multiqc"]["template"],
        data_format = config["software_params"]["multiqc"]["data_format"],
        additional_params = config["software_params"]["multiqc"]["additional_params"]
    log:
        report_log + "trimmomatic.multiqc.log"
    benchmark:
        report_log + "trimmomatic.multiqc.json"
    shell:
        "echo {input} | "
        "tr -s \" \" | "
        "tr \" \" \"\\n\" "
        "> {params.fofn} 2> {log} ; "
        "multiqc "
            "--fullnames "
            "--title {params.title} "
            "--filename {output.html} "
            "--template {params.template} "
            "--file-list {params.fofn} "
            "--data-format {params.data_format} "
            "{params.additional_params} "
        "2>> {log} 1>&2"
