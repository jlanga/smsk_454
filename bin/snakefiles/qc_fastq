rule qc_sample_from_fastq_decompress:
    """
    Decompress fastq.gz for snowhite (fastq files)
    """
    input:
        fq_gz = raw_dir + "{sample}.from_fastq.raw.fq.gz"
    output:
        fq = temp(qc_dir + "{sample}.from_fastq.raw.fq")
    threads:
        1
    log:
        qc_log + "{sample}.from_fastq.decompress.log"
    benchmark:
        qc_log + "{sample}.from_fastq.decompress.json"
    shell:
        "pigz "
            "--decompress "
            "--stdout "
            "{input.fq_gz} "
        "> {output.fq} "
        "2> {log}"



rule qc_snowhite_from_fastq_sample:
    """
    Run Snowhite (for raw fastq files)
    """
    input:
        fastq= qc_dir + "{sample}.from_fastq.raw.fq",
        adaptors= raw_dir + "adaptors.fa"
    output:
        fastq = temp(qc_dir + "{sample}.from_fastq.snowhite.fq"),
        fastq_gz= qc_dir + "{sample}.from_fastq.snowhite.fq.gz"
    params:
        tarball= "src/SnoWhite_2.0.3_release.tar.gz",
        out_folder = "out",
        minimum_sequence_length= config["software_params"]["snowhite"]["minimum_sequence_length"],
        delete_temporary_files= config["software_params"]["snowhite"]["delete_temporary_files"],
        output_fastq= config["software_params"]["snowhite"]["output_fastq"],
        split_in_subfiles= config["software_params"]["snowhite"]["split_in_subfiles"],
        barcodes_in_end = config["software_params"]["snowhite"]["barcodes_in_end"],
        number_of_mismatches = config["software_params"]["snowhite"]["number_of_mismatches"],
        minimum_quality= config["software_params"]["snowhite"]["minimum_quality"],
        end_clipping= config["software_params"]["snowhite"]["end_clipping"],
        bases_to_clip= config["software_params"]["snowhite"]["bases_to_clip"],
        execute_tagdust= config["software_params"]["snowhite"]["execute_tagdust"],
        false_discovery_rate= config["software_params"]["snowhite"]["false_discovery_rate"],
        execute_seqclean= config["software_params"]["snowhite"]["execute_seqclean"],
        execute_poly_trimming= config["software_params"]["snowhite"]["execute_poly_trimming"],
        poly_tail_min_repeat_length= config["software_params"]["snowhite"]["poly_tail_min_repeat_length"],
        poly_a_ends= config["software_params"]["snowhite"]["poly_a_ends"],
        poly_t_ends= config["software_params"]["snowhite"]["poly_t_ends"],
        poly_tail_terminal_bases_cap= config["software_params"]["snowhite"]["poly_tail_terminal_bases_cap"],
        poly_tail_minimum_repeat_length= config["software_params"]["snowhite"]["poly_tail_minimum_repeat_length"],
        internal_poly_minimum_length= config["software_params"]["snowhite"]["internal_poly_minimum_length"],
        keep_longer_end= config["software_params"]["snowhite"]["keep_longer_end"],
        ns_as_a_or_t= config["software_params"]["snowhite"]["ns_as_a_or_t"],
        allow_wobble= config["software_params"]["snowhite"]["allow_wobble"],
    threads:
        4 # Snowhite is mostly monothreaded
    log:
        qc_log + "{sample}.from_fastq.snowhite.log"
    benchmark:
        qc_log + "{sample}.from_fastq.snowhite.json"
    shadow:
        "shallow"
    shell:
        "tar "
            "xvf "
            "{params.tarball} "
            "-C . "
        "2> {log} 1>&2 ; "
        "mv SnoWhite_2.0.3_release/* . ; "
        "yes | perl snowhite_2.0.3.pl "
            "-f {input.fastq} "
            "-o {params.out_folder} "
            "-v {input.adaptors} "
            "-s {input.adaptors} "
            "-m {params.minimum_sequence_length} "
            "-g {params.delete_temporary_files} "
            "-R {params.output_fastq} "
            "`#-B {params.split_in_subfiles}` "
            "`#-j {params.barcodes_in_end}` "
            "`#-z {params.number_of_mismatches}` "
            "-Q {params.minimum_quality} "
            "`#-E {input.adaptors}` "
            "`#-c {params.bases_to_clip}` "
            "-D {params.execute_tagdust} "
            "-d {params.false_discovery_rate} "
            "-L {params.execute_seqclean} "
            "-p {threads} "
            "-Y {params.execute_poly_trimming} "
            "-l {params.poly_tail_min_repeat_length} "
            "-a {params.poly_a_ends} "
            "-t {params.poly_t_ends} "
            "-b {params.poly_tail_terminal_bases_cap} "
            "-r {params.poly_tail_min_repeat_length} "
            "-i {params.internal_poly_minimum_length} "
            "-k {params.keep_longer_end} "
            "-n {params.ns_as_a_or_t} "
            "-w {params.allow_wobble} "
        "2>> {log} 1>&2 || true ; " #Snowhite returns exit status different from 0 even after success
        "mv "
            "out/FinalOutput/out.clean "
            "{output.fastq} "
        "2>> {log} 1>&2 ; "
        "pigz "
            "--best "
            "--stdout "
            "{output.fastq} "
        "> {output.fastq_gz} "
        "2>> {log}"



# rule qc_sample_from_fastq_compress:
#     """
#     Compress snowhite's results (from fastq raw files).
#     """
#     input:
#         fq = qc_dir + "{sample}.from_fastq.snowhite.fq"
#     output:
#         fq_gz = qc_dir + "{sample}.from_fastq.snowhite.fq.gz"
#     threads:
#         1 # Just do it even though pigz uses all threads
#     log:
#         qc_log + "{sample}.from_fastq.compress.log"
#     benchmark:
#         qc_log + "{sample}.from_fastq.compress.json"
#     shell:
#         "pigz --best --stdout {input.fq} > {output.fq_gz} 2> {log}"



rule qc_sample_from_fastq_trimmomatic:
    """
    Perform a last trimming step with trimmomatic in SE mode
    """
    input:
        fq_gz = qc_dir + "{sample}.from_fastq.snowhite.fq.gz"
    output:
        fq_gz = qc_dir + "{sample}.from_fastq.trimmomatic.fq.gz"
    threads:
        64
    params:
        trimmomatic_params = config["software_params"]["trimmomatic"]["params"]
    log:
        qc_log + "{sample}.from_fastq.trimmomatic.log"
    benchmark:
        qc_log + "{sample}.from_fastq.trimmomatic.json"
    shell:
        "trimmomatic SE "
            "-threads {threads} "
            "-phred33 "
            "<(pigz -dc {input.fq_gz}) "
            ">(cut -f 1 -d \" \" | pigz -9 > {output.fq_gz}) "
            "{params.trimmomatic_params} "
        "2> {log}"



rule qc_sample_from_fastq_decompress_trimmomatic:
    """
    Decompress trimmomatic output files for gsAssembler
    """
    input:
        fq_gz = qc_dir + "{sample}.from_fastq.trimmomatic.fq.gz"
    output:
        fq = temp(qc_dir + "{sample}.from_fastq.trimmomatic.fq")
    threads:
        1
    log:
        qc_log + "{sample}.from_fastq.decompress_trimmomatic.log"
    benchmark:
        qc_log + "{sample}.from_fastq.decompress_trimmomatic.json"
    shell:
        "pigz "
            "--decompress "
            #"--keep "
            "--stdout "
            "{input.fq_gz} "
        "> {output.fq} "
        "2> {log}"