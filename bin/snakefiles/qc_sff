rule qc_pyrobayes_sample:
    """
    Perform base calling with Pyrobayes
    """
    input:
        sff   = raw_dir + "{sample}.from_sff.sff"
    output:
        fasta = temp(qc_dir + "{sample}.from_sff.pyrobayes.fasta"),
        qual  = temp(qc_dir + "{sample}.from_sff.pyrobayes.fasta.qual")
    params:
        stub  = qc_dir + "{sample}.from_sff.pyrobayes",
    log:
        qc_doc + "pyrobayes_{sample}.log"
    benchmark:
        qc_doc + "pyrobayes_{sample}.json"
    threads:
        1
    shell:
        "./src/UnifiedRelease/bin/PyroBayes "
            "--sffFile {input.sff} "
            "--outStub {params.stub} "
        "2> {log} 1>&2"



rule qc_join_fasta_qual_sample:
    """
    Join fasta and qual files into a fastq.gz
    """
    input:
        fasta = qc_dir + "{sample}.from_sff.pyrobayes.fasta",
        qual  = qc_dir + "{sample}.from_sff.pyrobayes.fasta.qual"
    output:
        fastq_gz = protected(qc_dir + "{sample}.from_sff.pyrobayes.fq.gz")
    threads:
        4
    log:
        qc_doc + "join_fasta_qual_{sample}.log"
    benchmark:
        qc_doc + "join_fasta_qual_{sample}.json"
    shell:
        "( python3 bin/fasta_qual_to_fastq.py "
            "{input.fasta} "
            "{input.qual} | "
        "pigz --best > {output.fastq_gz} ) "
        "2> {log} 2>&1"



rule qc_decompress_pyrobayes_fq_sample:
    """
    Decompress fastq.gz from pyrobayes for snowhite (sff files)
    """
    input:
        fq_gz = qc_dir + "{sample}.from_sff.pyrobayes.fq.gz"
    output:
        fq = temp(qc_dir + "{sample}.from_sff.pyrobayes.fq")
    threads:
        1
    log:
        qc_doc + "decompress_pyrobayes_fq_{sample}.log"
    benchmark:
        qc_doc + "decompress_pyrobayes_fq_{sample}.json"
    shell:
        "pigz "
            "--decompress "
            "--stdout "
            "{input.fq_gz} "
        "> {output.fq} "
        "2> {log}"



rule qc_snowhite_from_sff_sample:
    """
    Run Snowhite (for raw sff files)
    """
    input:
        fastq= qc_dir + "{sample}.from_sff.pyrobayes.fq",
        adaptors= raw_dir + "adaptors.fa"
    output:
        fastq= temp(qc_dir + "{sample}.from_sff.snowhite.fq")
    params:
        tarball= "src/SnoWhite_2.0.3_release.tar.gz",
        out_folder = "out",
        minimum_sequence_length= config["software_params"]["snowhite"]["minimum_sequence_length"],
        delete_temporary_files= config["software_params"]["snowhite"]["delete_temporary_files"],
        output_fastq= config["software_params"]["snowhite"]["output_fastq"],
        split_in_subfiles= config["software_params"]["snowhite"]["split_in_subfiles"],
        barcodes_in_end = config["software_params"]["snowhite"]["barcodes_in_end"],
        number_of_mismatches = config["software_params"]["snowhite"]["number_of_mismatches"],
        minimum_quality= config["software_params"]["snowhite"]["minimum_quality"],
        end_clipping= config["software_params"]["snowhite"]["end_clipping"],
        bases_to_clip= config["software_params"]["snowhite"]["bases_to_clip"],
        execute_tagdust= config["software_params"]["snowhite"]["execute_tagdust"],
        false_discovery_rate= config["software_params"]["snowhite"]["false_discovery_rate"],
        execute_seqclean= config["software_params"]["snowhite"]["execute_seqclean"],
        execute_poly_trimming= config["software_params"]["snowhite"]["execute_poly_trimming"],
        poly_tail_min_repeat_length= config["software_params"]["snowhite"]["poly_tail_min_repeat_length"],
        poly_a_ends= config["software_params"]["snowhite"]["poly_a_ends"],
        poly_t_ends= config["software_params"]["snowhite"]["poly_t_ends"],
        poly_tail_terminal_bases_cap= config["software_params"]["snowhite"]["poly_tail_terminal_bases_cap"],
        poly_tail_minimum_repeat_length= config["software_params"]["snowhite"]["poly_tail_minimum_repeat_length"],
        internal_poly_minimum_length= config["software_params"]["snowhite"]["internal_poly_minimum_length"],
        keep_longer_end= config["software_params"]["snowhite"]["keep_longer_end"],
        ns_as_a_or_t= config["software_params"]["snowhite"]["ns_as_a_or_t"],
        allow_wobble= config["software_params"]["snowhite"]["allow_wobble"],
    threads:
        4 # Snowhite is mostly monothreaded
    log:
        qc_doc + "snowhite_from_sff_{sample}.log"
    benchmark:
        qc_doc + "snowhite_from_sff_{sample}.json"
    shadow:
        "shallow"
    shell:
        "tar xvf {params.tarball} -C . 2> {log} 1>&2 ; "
        "mv SnoWhite_2.0.3_release/* . ; "
        "yes | perl snowhite_2.0.3.pl "
            "-f {input.fastq} "
            "-o {params.out_folder} "
            "-v {input.adaptors} "
            "-s {input.adaptors} "
            "-m {params.minimum_sequence_length} "
            "-g {params.delete_temporary_files} "
            "-R {params.output_fastq} "
            "`#-B {params.split_in_subfiles}` "
            "`#-j {params.barcodes_in_end}` "
            "`#-z {params.number_of_mismatches}` "
            "-Q {params.minimum_quality} "
            "`#-E {input.adaptors}` "
            "`#-c {params.bases_to_clip}` "
            "-D {params.execute_tagdust} "
            "-d {params.false_discovery_rate} "
            "-L {params.execute_seqclean} "
            "-p {threads} "
            "-Y {params.execute_poly_trimming} "
            "-l {params.poly_tail_min_repeat_length} "
            "-a {params.poly_a_ends} "
            "-t {params.poly_t_ends} "
            "-b {params.poly_tail_terminal_bases_cap} "
            "-r {params.poly_tail_min_repeat_length} "
            "-i {params.internal_poly_minimum_length} "
            "-k {params.keep_longer_end} "
            "-n {params.ns_as_a_or_t} "
            "-w {params.allow_wobble} "
        "2>> {log} 1>&2 || "
        "mv "
            "out/FinalOutput/out.clean "
            "{output.fastq} "
        "2>> {log} 1>&2 || "
        "true #Snowhite returns exit status different from 0 even after success ; "



rule qc_compress_from_sff_sample:
    """
    Compress snowhite's results (from sff raw files).
    """
    input:
        fq = qc_dir + "{sample}.from_sff.snowhite.fq"
    output:
        fq_gz = protected(qc_dir + "{sample}.from_sff.snowhite.fq.gz")
    threads:
        1 # Just do it even though pigz uses all threads
    log:
        qc_doc + "compress_from_sff_{sample}.log"
    benchmark:
        qc_doc + "compress_from_sff_{sample}.json"
    shell:
        "pigz --best --stdout {input.fq} > {output.fq_gz} 2> {log}"
